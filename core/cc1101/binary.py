import struct

def bitsToOctet(bits):
    _bytes = []

    for x in range(0, len(bits), 8):
        _bytes.append(bits[x:8+x])

    # padding
    if len(_bytes[-1]) > 8:
        _bytes.pop()
    elif len(_bytes[-1]) != 8:
        while len(_bytes[-1]) != 8:
            _bytes[-1] += "0"
    
    return _bytes

def bitToByte(byte):
    return format(byte, '08b')

def deleteTrailingNull(bits):
    return bits # debug

    # removing trailing from the front
    while bits[0] == "00000000":
        bits.pop(0)

    # removing trailing from the back
    while bits[-1] == "00000000":
        bits.pop(-1)

    return bits

def bin2(num:int):
    a = str(bin(num))[2:]
    if len(a) == 8: 
        return a
    else:
        dif = 8 - len(a)
        return "0"*dif + a
    
def b2h(_bytes):
    hexa = []
    for byte in _bytes:
        hexa.append(byte.hex())
    return hexa

def hexToBytes(hexa):
    _bytes = []
    for x in hexa:
        _bytes.append(bin2(int(x, 0)))
    return _bytes

def octetsToHex(octets):
    hexa = []
    foundData = False

    for x in octets:
        a = "0x%X" % int(''.join([str(y) for y in x]), base=2)
        hexa.append(a)

    while True:
        try:
            x = hexa[0]
        except IndexError:
            return ["0x0"] # no data!
        
        if foundData == False:
            if x == "0x0":
                hexa.pop(0)
            else:
                foundData = True
                break

    return hexa

"""
a

bts = bitsToBytes(a)

print("starting at {} bytes".format(len(bts)))

bts = deleteTrailingNull(bts)

print("compressed to {} bytes".format(len(bts)))

b2h = bytesToHex(bts)
print(b2h)

h2b = hexToBytes(b2h)
print(h2b)

print(h2b == bts)
"""